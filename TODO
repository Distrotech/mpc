New functions to implement:
- from Mickael Gastineau <gastineau@imcce.fr> 20 Feb 2007:
  int mpc_fr_div (mpc_t rop, mpfr_t op1, mpc_t op2, mpc_rnd_t rnd)
      rop = op1 / op2
- from Mickael Gastineau <gastineau@imcce.fr> 14 Apr 2008:
  mpc_fma: d=a*b+c
- from Andreas Enge 9 April 2008:
  mpc_pow_ui
- from Andreas Enge 9 April 2008:
  depending on a preprocessor variable (DEBUG or MPC_LOG), add
  logging: For each function call, output arguments and precision, and
  the successive precisions in the main loop; allows to test with
  real world data whether we hit corner cases
  possibly: mpc_write and mpc_read that serialises mpc objects (output in
  base 16 together with the precision of the variable)
- from Andreas Enge and Philippe Théveny 9 April 2008
  work plan for completing functionality
  1) inverse trigonometric functions
  2) hyperbolic functions and cproj at any moment (relatively easy)
- from Andreas Enge and Philippe Théveny 17 July 2008
  agm (and complex logarithm with agm ?)
New tests to add:
- from Andreas Enge and Philippe Théveny 9 April 2008
  systematic testing whether ok when output variable equals some
  input variable
- from Andreas Enge and Philippe Théveny 9 April 2008
  correct handling of Nan and infinities in the following functions: abs, add,
  add_fr, add_ui, cmp, cmp_si_si, conj, div_2exp, div, div_fr, div_ui, exp,
  fr_sub, log, mul, mul_fr, mul_i, mul_si, mul_ui, neg, norm, sqr, sub,
  sub_fr, sub_ui, ui_div, and ui_ui_sub.
  See Annex G of the C99 draft
    (http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf)
    and check compatibility with LIA-3.
  beware of intermediate overflows while the result may fit
     (we need special code)
  beware of strange specifications in C99, that we want to follow,
     but that are not automatic from the behaviour of mpfr
